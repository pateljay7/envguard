import chalk from 'chalk';
import { ValidationResult, ReportOptions, EnvKey, EnvValue } from '../types.js';

export function generateReport(
  result: ValidationResult,
  options: ReportOptions
): string {
  switch (options.format) {
    case 'json':
      return generateJsonReport(result);
    case 'minimal':
      return generateMinimalReport(result, options.colors);
    case 'table':
    default:
      return generateTableReport(result, options.colors);
  }
}

function generateJsonReport(result: ValidationResult): string {
  return JSON.stringify(result, null, 2);
}

function generateMinimalReport(result: ValidationResult, useColors: boolean): string {
  const lines: string[] = [];
  
  if (result.missing.length > 0) {
    const prefix = useColors ? chalk.red('✗') : '✗';
    lines.push(`${prefix} Missing: ${result.missing.join(', ')}`);
  }
  
  if (result.unused.length > 0) {
    const prefix = useColors ? chalk.yellow('⚠') : '⚠';
    lines.push(`${prefix} Unused: ${result.unused.join(', ')}`);
  }
  
  if (result.empty.length > 0) {
    const prefix = useColors ? chalk.yellow('⚠') : '⚠';
    lines.push(`${prefix} Empty: ${result.empty.join(', ')}`);
  }
  
  if (result.uncertain.length > 0) {
    const prefix = useColors ? chalk.yellow('?') : '?';
    lines.push(`${prefix} Dynamic: ${result.uncertain.join(', ')}`);
  }
  
  if (lines.length === 0) {
    const prefix = useColors ? chalk.green('✓') : '✓';
    lines.push(`${prefix} All environment variables are properly configured`);
  }
  
  return lines.join('\n');
}

function generateTableReport(result: ValidationResult, useColors: boolean): string {
  const lines: string[] = [];
  
  // Summary section
  lines.push('Environment Variable Report');
  lines.push('==========================');
  lines.push('');
  
  const summaryColor = result.summary.totalIssues > 0 ? 
    (useColors ? chalk.red : (s: string) => s) : 
    (useColors ? chalk.green : (s: string) => s);
  
  lines.push(summaryColor(`✓ ${result.summary.keysInCode} keys found in code`));
  lines.push(summaryColor(`✓ ${result.summary.keysInEnv} keys found in .env`));
  
  if (result.summary.totalIssues > 0) {
    lines.push(summaryColor(`❌ ${result.summary.totalIssues} total issues found`));
  } else {
    lines.push(summaryColor('✅ No issues found'));
  }
  
  lines.push('');
  
  // Issues section
  if (result.missing.length > 0) {
    const header = useColors ? chalk.red.bold('Missing Keys:') : 'Missing Keys:';
    lines.push(header);
    for (const key of result.missing) {
      const bullet = useColors ? chalk.red('  ❌') : '  ❌';
      lines.push(`${bullet} ${key}`);
    }
    lines.push('');
  }
  
  if (result.unused.length > 0) {
    const header = useColors ? chalk.yellow.bold('Unused Keys:') : 'Unused Keys:';
    lines.push(header);
    for (const key of result.unused) {
      const bullet = useColors ? chalk.yellow('  ⚠️') : '  ⚠️';
      lines.push(`${bullet} ${key}`);
    }
    lines.push('');
  }
  
  if (result.empty.length > 0) {
    const header = useColors ? chalk.yellow.bold('Empty Values:') : 'Empty Values:';
    lines.push(header);
    for (const key of result.empty) {
      const bullet = useColors ? chalk.yellow('  ⚠️') : '  ⚠️';
      lines.push(`${bullet} ${key}`);
    }
    lines.push('');
  }
  
  if (result.duplicates.length > 0) {
    const header = useColors ? chalk.red.bold('Duplicate Keys:') : 'Duplicate Keys:';
    lines.push(header);
    for (const key of result.duplicates) {
      const bullet = useColors ? chalk.red('  ❌') : '  ❌';
      lines.push(`${bullet} ${key}`);
    }
    lines.push('');
  }
  
  if (result.uncertain.length > 0) {
    const header = useColors ? chalk.yellow.bold('Dynamic/Uncertain Keys:') : 'Dynamic/Uncertain Keys:';
    lines.push(header);
    for (const key of result.uncertain) {
      const bullet = useColors ? chalk.yellow('  ?') : '  ?';
      lines.push(`${bullet} ${key}`);
    }
    lines.push('');
  }
  
  if (result.summary.totalIssues === 0) {
    const success = useColors ? chalk.green.bold('🎉 All environment variables are properly configured!') : 
                   '🎉 All environment variables are properly configured!';
    lines.push(success);
  }
  
  return lines.join('\n');
}

export function generateEnvExample(codeKeys: EnvKey[]): string {
  const lines: string[] = [];
  
  lines.push('# Environment Variables');
  lines.push('# Generated by envguard');
  lines.push('# Copy this file to .env and fill in the values');
  lines.push('');
  
  const sortedKeys = codeKeys
    .filter(key => !key.name.startsWith('DYNAMIC_KEY_'))
    .sort((a, b) => a.name.localeCompare(b.name));
  
  for (const key of sortedKeys) {
    if (key.isOptional) {
      lines.push(`# Optional: ${key.name}=`);
    } else {
      lines.push(`${key.name}=`);
    }
  }
  
  return lines.join('\n');
}

export function generateDetailedReport(
  result: ValidationResult,
  missingDetails: Map<string, EnvKey>,
  unusedDetails: Map<string, EnvValue>,
  useColors: boolean = true
): string {
  const lines: string[] = [];
  
  lines.push(generateTableReport(result, useColors));
  
  if (missingDetails.size > 0) {
    lines.push('');
    const header = useColors ? chalk.red.bold('Missing Key Details:') : 'Missing Key Details:';
    lines.push(header);
    
    for (const [keyName, keyData] of missingDetails) {
      lines.push(`\n  ${keyName}:`);
      for (const usage of keyData.usage) {
        lines.push(`    📁 ${usage.file}:${usage.line}:${usage.column}`);
        lines.push(`       ${usage.raw}`);
      }
    }
  }
  
  if (unusedDetails.size > 0) {
    lines.push('');
    const header = useColors ? chalk.yellow.bold('Unused Key Details:') : 'Unused Key Details:';
    lines.push(header);
    
    for (const [keyName, keyData] of unusedDetails) {
      lines.push(`\n  ${keyName}:`);
      lines.push(`    📁 Defined in .env line ${keyData.line}`);
      if (keyData.value) {
        lines.push(`    💡 Current value: "${keyData.value}"`);
      }
    }
  }
  
  return lines.join('\n');
}
